{"version":3,"sources":["components/Navigation/MenuToggle/MenuToggle.module.css","components/Navigation/Drawer/Drawer.module.css","containers/Quiz/Quiz.module.css","components/ActiveQuiz/ActiveQuiz.module.css","components/ActiveQuiz/AnswersList/AnswersItem/AnswersItem.module.css","components/FinishedQuiz/FinishedQuiz.module.css","components/UI/Button/Button.module.css","hoc/Layout/Layout.module.css","components/UI/Backdrop/Backdrop.module.css","components/ActiveQuiz/AnswersList/AnswersList.module.css","components/Navigation/MenuToggle/MenuToggle.jsx","components/UI/Backdrop/Backdrop.jsx","components/Navigation/Drawer/Drawer.jsx","hoc/Layout/Layout.jsx","components/ActiveQuiz/AnswersList/AnswersItem/AnswersItem.jsx","components/ActiveQuiz/AnswersList/AnswersList.jsx","components/ActiveQuiz/ActiveQuiz.jsx","components/UI/Button/Button.jsx","components/FinishedQuiz/FinishedQuiz.jsx","containers/Quiz/Quiz.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","MenuToggle","props","cls","classes","isOpen","push","open","className","join","onClick","onToggle","Backdrop","links","Drawer","map","link","index","key","this","close","Fragment","renderLinks","onClose","Component","Layout","state","menu","toggleMenuHandler","setState","menuCloseHandler","children","AnswerItem","onAnswerClick","answer","id","text","AnswersList","answers","ActiveQuiz","Question","answerNumber","question","quizLength","Button","type","disabled","FinishedQuiz","successCount","Object","keys","results","reduce","total","quiz","quizItem","length","onRetry","Quiz","isFinished","activeQuestion","answerState","rightAnswerId","onAnswerClickHandler","answerId","console","log","timeout","window","setTimeout","isQuizFinished","clearTimeout","retryHandler","QuizWrapper","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.674762f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MenuToggle\":\"MenuToggle_MenuToggle__1WaZw\",\"open\":\"MenuToggle_open__33SR0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Drawer\":\"Drawer_Drawer__-EUEA\",\"close\":\"Drawer_close__HxBcw\",\"active\":\"Drawer_active__1gkyU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz_Quiz__29G2s\",\"QuizWrapper\":\"Quiz_QuizWrapper__2EemJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz_ActiveQuiz__qAEZb\",\"Question\":\"ActiveQuiz_Question__dhnOC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswersItem_AnswerItem__2VU40\",\"success\":\"AnswersItem_success__3xdgI\",\"error\":\"AnswersItem_error__9WBpJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FinishedQuiz\":\"FinishedQuiz_FinishedQuiz__37gi8\",\"success\":\"FinishedQuiz_success__1cpLE\",\"error\":\"FinishedQuiz_error__3tVX1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__28PT7\",\"success\":\"Button_success__3zoPK\",\"error\":\"Button_error__3KeSD\",\"primary\":\"Button_primary__Fpf2i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__vnNwe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__2Jstq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList_AnswersList__DscDz\"};","import React from 'react';\r\nimport classes from './MenuToggle.module.css';\r\n\r\nconst MenuToggle = (props) => {\r\n    const cls = [\r\n        classes.MenuToggle,\r\n        'fa',\r\n    ];\r\n    if (props.isOpen) {\r\n        cls.push('fa-times');\r\n        cls.push(classes.open);\r\n    } else {\r\n        cls.push('fa-bars');\r\n    }\r\n    return (\r\n        <i\r\n            className={cls.join(' ')}\r\n            onClick={props.onToggle}\r\n        />\r\n    )\r\n};\r\n\r\nexport default MenuToggle;","import React from 'react';\r\nimport classes from './Backdrop.module.css';\r\n\r\nconst Backdrop = (props) => <div className={classes.Backdrop} onClick={props.onClick} />;\r\nexport default Backdrop;","import React, {Component} from 'react';\r\nimport classes from './Drawer.module.css';\r\nimport Backdrop from \"../../UI/Backdrop/Backdrop\";\r\n\r\nconst links = [\r\n    1, 2, 3,\r\n];\r\n\r\nclass Drawer extends Component {\r\n    renderLinks () {\r\n        return links.map((link, index) => {\r\n            return (\r\n                <li key={index}>\r\n                    <a >Link {link}</a>\r\n                </li>\r\n            )\r\n        })\r\n    }\r\n    render() {\r\n        const cls = [\r\n          classes.Drawer,\r\n        ];\r\n        if ( !this.props.isOpen) {\r\n            cls.push(classes.close)\r\n        }\r\n        return (\r\n                <React.Fragment>\r\n                    <nav className={cls.join(' ')}>\r\n                        <ul>\r\n                            {this.renderLinks() }\r\n                        </ul>\r\n                    </nav>\r\n                    { this.props.isOpen ? <Backdrop onClick={this.props.onClose} /> : null }\r\n                </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Drawer;\r\n","import React, {Component} from 'react';\r\nimport classes from './Layout.module.css';\r\nimport MenuToggle from \"../../components/Navigation/MenuToggle/MenuToggle\";\r\nimport Drawer from \"../../components/Navigation/Drawer/Drawer\";\r\n\r\nclass Layout extends Component {\r\n    state = {\r\n        menu: false,\r\n    };\r\n\r\n    toggleMenuHandler = () => {\r\n        this.setState({\r\n            menu: !this.state.menu\r\n        })\r\n    };\r\n\r\n    menuCloseHandler = () => {\r\n        this.setState({\r\n            menu: false,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Layout}>\r\n                <Drawer\r\n                    isOpen={this.state.menu}\r\n                    onClose={this.menuCloseHandler}\r\n                />\r\n                <MenuToggle\r\n                    onToggle={this.toggleMenuHandler}\r\n                    isOpen={this.state.menu}\r\n                />\r\n\r\n                <main>\r\n                    { this.props.children }\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport classes from './AnswersItem.module.css'\r\n\r\nconst AnswerItem = props => {\r\n    const cls = [classes.AnswerItem];\r\n\r\n\r\n    if (props.state) {\r\n        cls.push(classes[props.state])\r\n    }\r\n\r\n    return (\r\n        <li className={cls.join(' ')}\r\n        onClick={() => props.onAnswerClick(props.answer.id)}>\r\n            {props.answer.text}\r\n        </li>\r\n    )\r\n};\r\nexport default AnswerItem;","import React from 'react';\r\nimport classes from './AnswersList.module.css';\r\nimport AnswerItem from './AnswersItem/AnswersItem';\r\n\r\nconst AnswersList = props => (\r\n    <ul className={classes.AnswersList}>\r\n        {props.answers.map((answer, index) => {\r\n            return (\r\n                <AnswerItem\r\n                    key={index}\r\n                    answer={answer}\r\n                    onAnswerClick={props.onAnswerClick}\r\n                    state={props.state ? props.state[answer.id] : null}\r\n                />\r\n            )\r\n        })}\r\n    </ul>\r\n);\r\n\r\nexport default AnswersList;\r\n","import React from 'react';\r\nimport classes from './ActiveQuiz.module.css'\r\nimport AnswersList from './AnswersList/AnswersList'\r\n\r\nconst ActiveQuiz = props => (\r\n    <div className={classes.ActiveQuiz}>\r\n        <p className={classes.Question}>\r\n            <span>\r\n                <strong>{ props.answerNumber } .</strong>&nbsp;\r\n                {props.question}\r\n            </span>\r\n\r\n            <small>{ props.answerNumber } из { props.quizLength }</small>\r\n        </p>\r\n        <AnswersList\r\n            state={props.state}\r\n            answers={props.answers}\r\n            onAnswerClick={props.onAnswerClick}\r\n        />\r\n\r\n\r\n    </div>\r\n);\r\n\r\nexport default ActiveQuiz;","import React from 'react';\r\nimport classes from './Button.module.css';\r\n\r\nconst Button = (props) => {\r\n    const cls = [\r\n        classes.Button,\r\n        classes[props.type]\r\n    ];\r\n\r\n    return (\r\n        <button\r\n            onClick={props.onClick}\r\n            className={cls.join(' ')}\r\n            disabled={props.disabled}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    )\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport classes from './FinishedQuiz.module.css';\r\nimport Button from  '../UI/Button/Button';\r\n\r\nconst FinishedQuiz = props => {\r\n    const successCount = Object.keys(props.results).reduce((total, key) => {\r\n        if (props.results[key] === 'success') {\r\n            total += 1;\r\n        }\r\n        return total;\r\n    }, 0);\r\n    return (\r\n        <div className={classes.FinishedQuiz}>\r\n            <ul>\r\n                { props.quiz.map((quizItem, index) => {\r\n                    const cls = [\r\n                        'fa',\r\n                        props.results[quizItem.id] === 'error' ? 'fa-times' : 'fa-check',\r\n                        classes[props.results[quizItem.id]]\r\n                    ];\r\n                    return (\r\n                        <li key={index}>\r\n                            <strong>{index + 1}.</strong> &nbsp;\r\n                            {quizItem.question}\r\n                            <i className={cls.join(' ')}/>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            <p>Правильно {successCount} из {props.quiz.length}</p>\r\n\r\n            <div>\r\n                <Button onClick={props.onRetry} type={'primary'}>Повторить</Button>\r\n                <Button type={'success'}>Перейти к списку вопросов</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default FinishedQuiz;","import React, {Component} from 'react';\r\nimport classes from './Quiz.module.css';\r\nimport ActiveQuiz from \"../../components/ActiveQuiz/ActiveQuiz\"\r\nimport FinishedQuiz from \"../../components/FinishedQuiz/FinishedQuiz\";\r\n\r\nclass Quiz extends Component {\r\n    state = {\r\n        results: {}, // {[id] : 'success' 'error'}\r\n        isFinished: false,\r\n        activeQuestion: 0,\r\n        answerState: null, // { [id]: 'success' 'error'}\r\n        quiz: [\r\n            {\r\n                question: 'Какого цвета небо?',\r\n                rightAnswerId: 2,\r\n                id: 1,\r\n                answers: [\r\n                    {text: 'Чёрный', id: 1},\r\n                    {text: 'Синий', id: 2},\r\n                    {text: 'Красный', id: 3},\r\n                    {text: 'Зеленый', id: 4},\r\n                ]\r\n            },\r\n            {\r\n                question: 'В каком году основали Санкт-Петербург?',\r\n                rightAnswerId: 3,\r\n                id: 2,\r\n                answers: [\r\n                    {text: '1700', id: 1},\r\n                    {text: '1701', id: 2},\r\n                    {text: '1703', id: 3},\r\n                    {text: '1706', id: 4},\r\n                ]\r\n            },\r\n            {\r\n                question: 'Кто проживает на дне океана?',\r\n                rightAnswerId: 1,\r\n                id: 3,\r\n                answers: [\r\n                    {text: 'Спанч Боб', id: 1},\r\n                    {text: 'Ёжик', id: 2},\r\n                    {text: 'Лось', id: 3},\r\n                    {text: 'Сова', id: 4},\r\n                ]\r\n            },\r\n            {\r\n                question: 'Какого цвета море?',\r\n                rightAnswerId: 4,\r\n                id: 4,\r\n                answers: [\r\n                    {text: 'Чёрный', id: 1},\r\n                    {text: 'Зеленый', id: 2},\r\n                    {text: 'Красный', id: 3},\r\n                    {text: 'Синий', id: 4},\r\n                ]\r\n            },\r\n        ]\r\n    };\r\n\r\n    onAnswerClickHandler = (answerId) => {\r\n        if (this.state.answerState) {\r\n            const key = Object.keys(this.state.answerState)[0];\r\n            if (this.state.answerState[key] === 'success') {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const question = this.state.quiz[this.state.activeQuestion];\r\n        const results = this.state.results;\r\n        console.log(results);\r\n        if (question.rightAnswerId === answerId) {\r\n            if ( !results[question.id]) {\r\n                results[question.id] = 'success';\r\n            }\r\n            this.setState({\r\n                answerState: {[answerId]: 'success'},\r\n                results: results,\r\n            });\r\n            const timeout = window.setTimeout(() => {\r\n                if (this.isQuizFinished()) {\r\n                    this.setState({\r\n                        isFinished: true,\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        activeQuestion: this.state.activeQuestion + 1,\r\n                        answerState: null,\r\n                    })\r\n                }\r\n                window.clearTimeout(timeout);\r\n            }, 1000);\r\n\r\n        } else {\r\n            results[question.id] = 'error';\r\n            this.setState({\r\n                answerState: {[answerId]: 'error'},\r\n                results: results,\r\n            })\r\n        }\r\n\r\n    };\r\n\r\n    isQuizFinished () {\r\n        return this.state.activeQuestion + 1 === this.state.quiz.length\r\n    }\r\n\r\n    retryHandler = () => {\r\n        this.setState({\r\n            activeQuestion: 0,\r\n            answerState: null,\r\n            isFinished: false,\r\n            results: {},\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Quiz}>\r\n                <div className={classes.QuizWrapper}>\r\n\r\n                    <h1>Ответьте на все вопросы</h1>\r\n\r\n                    {\r\n                        this.state.isFinished\r\n                        ? <FinishedQuiz\r\n                            results={this.state.results}\r\n                            quiz={this.state.quiz}\r\n                            onRetry={this.retryHandler}\r\n                            />\r\n                        : <ActiveQuiz\r\n                                answers={this.state.quiz[this.state.activeQuestion].answers}\r\n                                question={this.state.quiz[this.state.activeQuestion].question}\r\n                                onAnswerClick={this.onAnswerClickHandler}\r\n                                quizLength={this.state.quiz.length}\r\n                                answerNumber={this.state.activeQuestion + 1}\r\n                                state={this.state.answerState}\r\n                            />\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Quiz;\r\n","import React from 'react';\nimport Layout from './hoc/Layout/Layout.jsx';\nimport Quiz from './containers/Quiz/Quiz.jsx';\n\nfunction App() {\n  return (\n    <Layout>\n      <Quiz />\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}